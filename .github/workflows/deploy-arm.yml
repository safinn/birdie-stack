name: 🚀 Deploy ARM

env:
  ENVIRONMENT: ${{ (github.ref == 'refs/heads/main' && 'prod') || github.ref_name }}

on:
  push:
    branches:
      - main
      - dev
  pull_request: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: ⬣ ESLint
    runs-on: ubuntu-latest
    steps:
      - name: ⬇️ Checkout repo
        uses: actions/checkout@v3

      - name: ⎔ Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: 📥 Download deps
        uses: bahmutov/npm-install@v1
        with:
          useLockFile: false

      - name: 🔬 Lint
        run: npm run lint

  typecheck:
    name: ʦ TypeScript
    runs-on: ubuntu-latest
    steps:
      - name: ⬇️ Checkout repo
        uses: actions/checkout@v3

      - name: ⎔ Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: 📥 Download deps
        uses: bahmutov/npm-install@v1
        with:
          useLockFile: false

      - name: 🔎 Type check
        run: npm run typecheck --if-present

  build:
    name: 🐳 Build
    permissions:
      id-token: write # This is required for requesting the JWT
      contents: read # This is required for actions/checkout
    # only build deployable branchs on pushes
    if: ${{ (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev') && github.event_name == 'push' }}
    runs-on: ubuntu-latest
    outputs:
      image: '${{ steps.login-ecr.outputs.registry }}/${{ env.ENVIRONMENT }}-birdie-stack-ecr:latest'
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2.0.0
        with:
          role-to-assume: arn:aws:iam:::role/github-actions-role
          aws-region: eu-west-1
          mask-aws-account-id: 'false'

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push
        uses: aws-actions/aws-codebuild-run-build@v1
        with:
          project-name: ${{ env.ENVIRONMENT }}-birdie-stack
          buildspec-override: |
            version: 0.2
            phases:
              pre_build:
                commands:
                  - echo Logging in to Amazon ECR...
                  - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
              build:
                commands:
                  - echo Build started on `date`
                  - echo Building the Docker image...
                  - docker build --tag $IMAGE_REPO_NAME:$IMAGE_TAG .
                  - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
              post_build:
                commands:
                  - echo Build completed on `date`
                  - echo Pushing the Docker image...
                  - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG

  deploy:
    name: 🚀 Deploy
    permissions:
      id-token: write # This is required for requesting the JWT
      contents: read # This is required for actions/checkout
    # only deploy deployable branchs on pushes
    if: ${{ (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev') && github.event_name == 'push' }}
    runs-on: ubuntu-latest
    needs: [lint, typecheck, build]
    steps:
      - name: ⬇️ Checkout repo
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2.0.0
        with:
          role-to-assume: arn:aws:iam:::role/github-actions-role
          aws-region: eu-west-1

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.ENVIRONMENT }}-birdie-stack-task --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.ENVIRONMENT }}-birdie-stack-task
          image: ${{ needs.build.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: birdie-stack
          cluster: ${{ env.ENVIRONMENT }}-birdie-stack-ecs-cluster
          wait-for-service-stability: true
